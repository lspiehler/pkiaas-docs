{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PKIaaS.io Documentation","text":"<p>Thank you for visiting the documentation for PKIaaS.io. This site is under construction. Contributers are welcome!</p> <p>PKIaaS.io is here to make PKI functionality\u2014usually limited to costly, complex platforms designed for enterprise customers\u2014accessible to a broader audience. PKIaaS.io was designed to serve not only small to medium-sized businesses but also home lab users, developers, testers, and PKI enthusiasts of all kinds!</p> <p>My name is Lyas Spiehler, and I was inspired to create PKIaaS.io out of a passion and curiosity for PKI, as well as a desire to fill the gap in accessible resources for learning about and easily generating x509 certificates. PKIaaS.io enables the creation of all types of certificates\u2014including SMIME, code signing, TLS/SSL, document signing, and more\u2014while offering comprehensive services you\u2019d expect from a robust PKI platform, such as CRL, OCSP, SCEP, ACME, timestamping, certificate transparency (SCT), etc.</p> <p>If you're new to PKIaaS.io, be sure to check out our Getting Started\ud83d\udc48 guide!</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#login","title":"Login","text":"<p>Getting started with PKIaaS.io is easy! All you need to do is click \"Manage PKI\" at the top right of the main page and choose the login you'd like to use.</p>"},{"location":"getting-started/#create-a-certificate-authority","title":"Create a Certificate Authority","text":"<p>All the certificates you'll create need to be signed by a certificate authority, so the first step is to create one. Navigating to any other page of the site before you've created a CA will redirect you back to a page forcing you to create one. If you're logging in for the first time, and you haven't created a CA before, you'll be asked to choose between a managed CA and a CA backed by an HSM. If you're new to PKI or you'd just like to take PKIaaS.io for a test drive, it would be best to choose the managed option to get going more quickly. Read more about these options here.</p> <p>Note: PKIaaS.io is a comprehensive PKI platform that requires the creation of a certificate authority to issue certificates. However, if your use case involves generating a simple self-signed certificate without the need for a certificate authority, a straightforward tool like CertificateTools.com may be a more convenient alternative.</p>"},{"location":"getting-started/#ca-configuration-options","title":"CA Configuration Options","text":"<p>If you're still learning about PKI, feel free to use the default options and just update the name when creating your first CA. This is the easiest option to start issuing certificates and getting a feel for the site. When you're done choosing options, click \"Create New CA\". You'll then be redirected to the \"Manage CAs\" page and your new CA will appear in the drop down at the top of the page.</p>"},{"location":"getting-started/#switch-cas","title":"Switch CAs","text":"<p>If you create more than one CA, you'll have the option of switching between them by selecting the one you'd like to manage from the dropdown at the top of the PKI management page to the right of the navigation pane. All other pages on the site will show only the resources\u2014templates, certificates, services, etc.\u2014within the context of the selected CA.</p>"},{"location":"getting-started/#using-your-new-ca","title":"Using Your New CA","text":"<p>Select the CA you want to work with from the dropdown at the top to the right of the navigation pane. This dropdown changes the scope of the site to manage the active CA. All actions performed\u2014signing certificates, creating templates, creating ACME policies, etc.\u2014will be done within the context of the selected CA.</p>"},{"location":"getting-started/#certificate-templates","title":"Certificate Templates","text":""},{"location":"getting-started/#manage-templates","title":"Manage Templates","text":"<p>Certificate templates can be managed by navigating to Certificate Templates -&gt; Manage Templates in the navigation pane on the left of the page. Certificate templates are used to enforce compliance of predefined standards for issuing certificates with your CA. These standards include key usages, subject attributes, basic constraints, and other certificate attributes. The use of templates is important to prevent accidental mis-issuance and to ensure that issued certificates are compliant with your security practices. All certificate signing on PKIaaS.io will be associated with a template.</p>"},{"location":"getting-started/#create-new-templates","title":"Create New Templates","text":"<p>By default, a \"Web Server\" template is automatically built for every CA that is created. This template has a good out-of-the-box configuration for issuing TLS/SSL certificates for web servers, but new, custom certificate templates can be created by navigating to Certificate Templates -&gt; Create Template. Enter a name for the template and choose default settings by selecting an option from the \"Starter Template\" dropdown. Click \"Create Template\" to proceed to the configuration page, where the template options can be customized. See more information on the available options here.  Once satisfied with the settings, click \"Save\" to finalize the changes and return to the template management page.</p>"},{"location":"getting-started/#issue-a-certificate","title":"Issue a Certificate","text":"<p>In the navigation page on the left, navigate to Certificate Templates -&gt; Manage Templates and click on the template you'd like to use. From the menu, you can choose either, \"Public Certificate Request\", \"Submit CSR\", or \"Create Pre-Approved Request.\" These options support various workflows for issuing certificates.</p>"},{"location":"getting-started/#public-certificate-request","title":"Public Certificate Request","text":"<p>If your workflow involves receiving certificate requests from users, the \"Public Certificate Request\" option allows you to send an email to users inviting them to easily submit a certificate request. It also shows the public URL that can be shared for others to submit a certificate request. This option allows users to submit a CSR or fill out a form containing the desired subject attributes and SANs. The latter option can be helpful for users that are not familiar with x509 certificates and includes an option to generate a private key automatically in the browser when the user claims their certificate after it is approved. To review and approve these requests, navigate to X509 Certificates -&gt; Pending Requests.</p>"},{"location":"getting-started/#submit-csr","title":"Submit CSR","text":"<p>The \"Submit CSR\" option provides an input field to paste the contents of a certificate signing request. To review and approve these requests, navigate to X509 Certificates -&gt; Pending Requests.</p>"},{"location":"getting-started/#create-pre-approved-request","title":"Create Pre-Approved Request","text":"<p>The \"Create Pre-Approved Request\" feature enables a PKI administrator to pre-configure all the settings typically chosen during the approval process for a pending certificate request. The administrator can either redeem the certificate immediately or send an email to the user, inviting them to claim it. In the certificate claim workflow, the user can set a password to protect the PKCS#12 file, and a 2048-bit RSA private key will be generated in the browser. Alternatively, a CSR can be submitted, however, the subject attributes and SANs specified in it will be overridden by the pre-approved attributes in the signed certificate.</p>"},{"location":"getting-started/#approve-pending-certificate-requests","title":"Approve Pending Certificate Requests","text":"<p>Certificates requested using the \"Public Certificate Request\" or \"Submit CSR\" options require approval. The requests pending approval can be found by navigating to X509 Certificates -&gt; Pending Requests. Here you will find options to Approve, Sign, Decline, or Re-Send emails for various types of certificate requests. Not all options are available for all types of certificate request workflows. These options can be performed in bulk, or the requests can be selected individually where additional options are provided to override subject attributes, subject alternative names (SANs), and to customize the validity time of the certificate instead of taking the template default.</p>"},{"location":"acme/create-acme-policy/","title":"Create an ACME Policy","text":"<p>An ACME policy associates ACME certificate requests with a specified certificate template and allows a comma-separated list of \"pre-approved domains\" to be supplied. Pre-approved domains will be automatically authorized and will not be required to do any ACME HTTP or DNS challenges. Wildcard domains are supported to pre-approve an entire root domain and all subdomains.</p> <p>To create an ACME policy, login to PKIaaS.io and navigate to ACME -&gt; Policies. Click \"Create\", enter a unique name for the new ACME policy, select which template should be used when signing certificates requested using this policy, optionally enter any pre-approved domains, and click \"Create Policy.\"</p> <p>Next, see Generate EAB Credentials.</p>"},{"location":"acme/generate-eab-credentials/","title":"Generate EAB Credentials","text":"<p>An ACME policy must be created before EAB credentials can be generated. See Create an ACME Policy if this step hasn't been completed yet.</p> <p>The use of EAB (external account binding) allows PKIaaS.io to associate ACME accounts with a specific user's PKIaaS.io account, CA, and ACME policy. To generate an EAB for registering a new ACME account, login to PKIaaS.io and navigate to ACME -&gt; Policies. Click the gears in the \"External Account Bindings\" column of one of the ACME policies to navigate to the EAB management page for the policy and click \"Create\". Enter a unique name for the EAB. Enter the desired value for \"Allowed Use Count\". This value represents the number of times this EAB can be used to register unique ACME accounts. Lastly, enter the expiration date after which ACME new account registrations will no longer be authorized with this EAB and click \"Create EAB\".</p> <p>When the new EAB is generated, a modal will appear providing the ACME directory URL, the EAB KID and HMAC Key, and some example commands to use the values provided to register a new ACME account using the certbot ACME client. These values can be used to register an ACME account with any ACME client that supports external account bindings. The KID and HMAC Key will only be displayed once, so be sure to copy them before closing the modal.</p> <p>Note: After an ACME account is registered with an EAB, it is permanently associated with the policy the EAB was generated for. It is safe to delete an EAB after an ACME account had been registered with it.</p> <p>Next, see Register an ACME Account.</p>"},{"location":"acme/overview/","title":"Overview","text":"<p>The ACME (Automatic Certificate Management Environment) protocol is a standard for automating the process of obtaining, renewing, and managing SSL/TLS certificates. It was developed by the Internet Security Research Group (ISRG), the organization behind Let's Encrypt, and is specified in RFC 8555. PKIaaS.io supports version 2 of the ACME protocol with HTTP-01 and DNS-01 challenges.</p> <p>Note: PKIaaS.io requires use of an EAB (External Account Binding) to register an ACME account. Because of this requirement, only ACME clients that support EAB will work with the PKIaaS.io ACME service.</p> <p>A few steps must be completed before requesting a certificate with an ACME client:</p> <ol> <li>Create an ACME Policy</li> <li>Generate EAB Credentials</li> <li>Register an ACME Account</li> </ol> <p>The ACME directory URL for all PKIaaS.io ACME requests is https://acme-v02-api.pkiaas.io/directory</p>"},{"location":"acme/register-acme-account/","title":"Register an ACME Account","text":"<p>An ACME EAB credential must be generated before an ACME account can be registered with PKIaaS.io. See Generate EAB Credentials if this step hasn't been completed yet.</p> <p>In order to use the ACME protocol to request a certificate from PKIaaS.io, an ACME account must be first be registered using an EAB. See the links below for more information getting started with various ACME clients.</p>"},{"location":"acme/register-acme-account/#acme-clients","title":"ACME Clients","text":"<ul> <li>certbot</li> <li>Certify the Web</li> <li>Traefik</li> </ul>"},{"location":"acme/acme-clients/certbot/","title":"Certbot","text":"<p>Be sure to have the EAB KID and HMAC Key ready for the steps below. See Generate EAB Credentials for more information.</p> <p>All values that appear in ALL CAPS in the examples below must be customized with values specific to you.</p>"},{"location":"acme/acme-clients/certbot/#register-an-account-only","title":"Register an Account Only","text":"<p><code>certbot register --server https://acme-v02-api.pkiaas.io/directory --email YOUREMAIL@YOURDOMAIN.COM --agree-tos --eab-kid YOUREABKID --eab-hmac-key YOUREABHMACKEY</code></p>"},{"location":"acme/acme-clients/certbot/#register-an-account-and-order-a-certificate-for-apache","title":"Register an Account and Order a Certificate for Apache","text":"<p><code>certbot --apache --server https://acme-v02-api.pkiaas.io/directory --email YOUREMAIL@YOURDOMAIN.COM --agree-tos -d MYDOMAIN.COM -d WWW.MYDOMAIN.COM --eab-kid YOUREABKID --eab-hmac-key YOUREABHMACKEY</code></p> <p>See the EFF certbot website for more information about certbot. </p>"},{"location":"acme/acme-clients/certify-the-web/","title":"Certify the Web","text":"<p>Be sure to have the EAB KID and HMAC Key ready for the steps below. See Generate EAB Credentials for more information.</p> <ol> <li>Download Certify the Web from https://certifytheweb.com/ and install it.</li> <li>Launch Certify the Web and click the Settings tab near the top of the window and then Certificate Authorities on the left. </li> <li>Click Edit Certificate Authorities.<ul> <li>In the Certificate Authority field, leave \"(New Certificate Authority)\" selected.</li> <li>In the Title field, enter \"PKIaaS.io\" or something else to uniquely identify the new CA.</li> <li>In the Production API field, enter the PKIaaS.io ACME directory URL \"https://acme-v02-api.pkiaas.io/directory\".</li> <li>Optionally enter a Description. The Staging API field may be left blank.</li> <li>Enable all of the options under Features</li> <li>Click Save </li> </ul> </li> <li>Click the New Account button on the far left of the Edit Certificate Authorities button clicked in step 3.<ul> <li>From the Certificate Authority dropdown, select the CA title that was entered in step 5.</li> <li>Enter the Email Address to be associated with the new ACME account.</li> <li>Check Yes, I Agree to agree to the terms and conditions for the CA. </li> </ul> </li> <li>Click Advanced to enter the EAB credentials.<ul> <li>Enter the Key Id and Key (HMAC) using the \"EAB KID\" and \"EAB HMAC Key\" provided when generating the EAB credentials.</li> <li>Click Register Contact. </li> </ul> </li> <li>The ACME account is now registered and ready to requests certificates from PKIaaS.io. Be sure to select the new CA created in step 3 when creating a new certificate request. </li> </ol> <p>See Certify the Web's Certificate Manager Documentation for more information about Certify The Web.</p>"},{"location":"acme/acme-clients/traefik/","title":"Traefik","text":"<p>Be sure to have the EAB KID and HMAC Key ready for the steps below. See Generate EAB Credentials for more information.</p> <p>All values that appear in ALL CAPS in the examples below must be customized with values specific to you.</p> <ol> <li>Create a docker-compose.yml on your server with the following content: <pre><code>version: \"3.3\"\n\nservices:\n\n  traefik:\n    image: \"traefik:v3.2\"\n    container_name: \"traefik\"\n    command:\n      #- \"--log.level=DEBUG\"\n      - \"--api.insecure=true\"\n      - \"--providers.docker=true\"\n      - \"--providers.docker.exposedbydefault=false\"\n      - \"--entryPoints.web.address=:80\"\n      - \"--entryPoints.websecure.address=:443\"\n      - \"--certificatesresolvers.myresolver.acme.httpchallenge=true\"\n      - \"--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web\"\n      - \"--certificatesresolvers.myresolver.acme.caserver=https://acme-v02-api.pkiaas.io/directory\"\n      - \"--certificatesresolvers.myresolver.acme.eab.kid=YOUREABKID\"\n      - \"--certificatesresolvers.myresolver.acme.eab.hmacencoded=YOUREABHMACKEY\"\n      - \"--certificatesresolvers.myresolver.acme.email=YOUREMAIL@YOURDOMAIN.COM\"\n      - \"--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      - \"8080:8080\"\n    volumes:\n      - \"./letsencrypt:/letsencrypt\"\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n\n  whoami:\n    image: \"traefik/whoami\"\n    container_name: \"simple-service\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.whoami.rule=Host(`whoami.example.com`)\"\n      - \"traefik.http.routers.whoami.entrypoints=websecure\"\n      - \"traefik.http.routers.whoami.tls.certresolver=myresolver\"\n</code></pre></li> <li>Create a \"letsencrypt\" directory in the same directory you created the docker-compose.yml file.</li> <li>Replace the values for certificatesresolvers.myresolver.acme.eab.kid, certificatesresolvers.myresolver.acme.eab.hmacencoded, and certificatesresolvers.myresolver.acme.email with your own correct values.</li> <li>Replace whoami.example.com by your own domain within the traefik.http.routers.whoami.rule label of the whoami service.</li> <li>Optionally uncomment the following line if you want to test/debug: <pre><code>#- \"--log.level=DEBUG\"\n</code></pre></li> <li>Run <code>docker-compose up -d</code> within the folder where you created the previous file.</li> <li>Wait a a few moments for the certificate request to complete, and visit https://your_own_domain to confirm everything worked as expected.</li> </ol> <p>See the Traefik website for more information about Traefik. </p>"},{"location":"certificate-authorities/create/","title":"Create Certificate Authorities","text":""},{"location":"certificate-authorities/create/#create-a-root-ca","title":"Create a Root CA","text":"<p>Users can create a root certificate authority by logging into PKIaaS.io and navigating to Certificate Authorities -&gt; Create New CA. Fill out the form with the appropriate options for the desired CA. See certificate authority overview for documentation on all of the available options. When creating a root CA, it is necessary to leave the \"CSR Only\" option at the bottom on the form unchecked. Upon clicking \"Create New CA,\" a new private key will be generated, and a self-signed, root certificate authority will be created and ready to issue certificates. See the getting started guide for more documentation about issuing certificates.</p>"},{"location":"certificate-authorities/create/#create-an-intermediatesubordinate-ca","title":"Create an Intermediate/Subordinate CA","text":"<p>To create an intermediate/subordinate certificate authority, ensure that the \"CSR Only\" option is selected on the Certificate Authorities -&gt; Create New CA page when selecting the options for the desired CA. See certificate authority overview for documentation on all of the available options. Upon clicking \"Create New CA,\" a new private key will be generated, and a CSR will be created. The browser will be redirected to a page containing the CSR where it can be copied to the clipboard and signed by another certificate authority.</p> <p>Note: If at any time you need to navigate back to the CSR page, go to Certificate Authorities -&gt; Manage CAs, click on the CA and select \"Download/Copy CSR\" from the menu.</p>"},{"location":"certificate-authorities/create/#sign-the-csr-with-a-root-ca-on-pkiaasio","title":"Sign the CSR with a Root CA on PKIaaS.io","text":"<p>If a certificate authority not managed by PKIaaS.io will be used to sign the CSR, see the documentation for the CA on how to do so. The following instructions will detail how this can be done on a CA managed by PKIaaS.io.</p> <p>While logged into PKIaaS.io, select the signing root CA from the dropdown at the top of the page. This will switch the context of the admin page to the selected CA. If a template for creating certificate authorities has not already been created, navigate to Certificate Templates -&gt; Create Template. Enter \"Intermediate CA\" as the template name and choose \"Certificate Authority\" as the started template. The browser will be directed to a page where the template can optionally be customized. Click \"Save\" to finish creating the new template.</p> <p>The browser should now be at the Certificate Templates -&gt; Manage Template page. Click on the \"Intermediate CA\" template and select \"Submit CSR\" from the menu. Paste the CSR copied to the clipboard in a previous step and click submit. See the note above for instructions to navigate back to the CSR if needed.</p> <p>The submitted CSR must now be approved in order to be signed. Navigate to X509/Certificates -&gt; Pending Requests. Click on the pending certificate request for the new intermediate CA. A modal will apear where some certificate attributes can optionally be overriden. Click \"Sign\" to sign the submitted CSR and issue the certificate.</p> <p>Finally navigate to X509/Certificates -&gt; Issued Certificates. Click on the newly issued certificate and copy it to the clipboard. This certificate must be imported to finish creating the new intermediate CA. Navigate to Certificate Authorities -&gt; Manage CAs, click on the new intermediate CA and choose \"Import Signed Certificate\" from the menu. Paste the signed certificate into the text area and click \"Import Certificate.\" The intermediate CA is now ready to issue certificates. Select it from the dropdown at the top of the page to begin using it.</p>"},{"location":"certificate-authorities/delete/","title":"Delete Certificate Authorities","text":"<p>To delete a certificate authority, login to PKIaaS.io and navigate to Certificate Templates -&gt; Manage CAs in the navigation pane on the left of the page. Click on a CA and select \"Edit CA\" from the menu. Click the red \"Delete\" button ro delete the CA. This action is not reversible and will delete all certificates and templates associated with the CA.</p>"},{"location":"certificate-authorities/edit/","title":"Edit Certificate Authorities","text":"<p>To edit a certificate authority, login to PKIaaS.io and navigate to Certificate Templates -&gt; Manage CAs in the navigation pane on the left of the page. Click on a CA and select \"Edit CA\" from the menu. The CPS (certificate practice statement) can be customized here as well as the service certificate settings. The service certificate settings manage the key type, key size and hash algorithm used when creating certificates for services like time stamping and OCSP.</p>"},{"location":"certificate-authorities/overview/","title":"Overview","text":"<p>A certificate authority (CA) serves as the foundation upon which all functionality on PKIaaS.io is dependent. Tasks like working with templates, issuing certificates, and managing ACME policies all operate within the scope of a CA. As such, the first step after signing into PKIaaS.io is creating a CA. Users will be automatically redirected to a setup page and prompted to create a CA before accessing other features on the site.</p> <p>Users can choose between creating a managed CA or one backed by an HSM. With a managed CA, the private key is securely stored using AES-256 encryption, offering a streamlined setup without additional configuration. Alternatively, the HSM-backed option integrates with a PKIaaS.io IoT-HSM, enabling key management via a YubiKey 5. In this setup, all signing operations are routed to the IoT-HSM, where they are processed by the YubiKey. For detailed guidance on creating a CA with IoT-HSM, refer to the IoT-HSM documentation.</p>"},{"location":"certificate-authorities/overview/#options","title":"Options","text":""},{"location":"certificate-authorities/overview/#subject-attributes","title":"Subject Attributes","text":"<p>When creating a certificate authority (CA), users are provided with a range of flexible options to tailor their setup. The first six fields customize the subject attributes of the CA, with only the \"Certificate Authority Name\" (common name) being mandatory.</p>"},{"location":"certificate-authorities/overview/#private-key","title":"Private Key","text":"<p>Next, users can configure the private key settings. Various types of private key types are supported including RSA, ECC, and CRYSTALS-dilithium. Here, users can also opt to use HSM (as previously mentioned) or import an existing private key.</p>"},{"location":"certificate-authorities/overview/#hash-algorithm-validity-and-path-length","title":"Hash Algorithm, Validity, and Path Length","text":"<p>Further customization options include selecting the signature hash algorithm, specifying the path length, and setting the certificate authority's validity period. The signature algorithm chosen here determines how the CA's certificate is self-signed. Depending on the private key used, additional signature options may become available for signing certificates within the certificate templates after the CA is established. For more details on \"Path Length,\" refer to RFC5280, which explains the \"basic constraints\" x509v3 attributes.</p>"},{"location":"certificate-authorities/overview/#key-usage","title":"Key Usage","text":"<p>It is not recommended to make changes to the default \"Key Usage\" and \"Extended Key Usage\" options. Making changes could result in issues with your certificate authority.</p>"},{"location":"certificate-authorities/overview/#intermediate-ca","title":"Intermediate CA","text":"<p>Finally, the \"CSR Only\" option is designed for cases where the CA being created will function as an intermediate or subordinate certificate authority rather than a root CA. This option generates a Certificate Signing Request (CSR) that must be signed by another CA. The signing can be performed by an external CA (such as Microsoft or EJBCA) or another PKIaaS.io CA. Once the signed certificate is obtained, it must be imported before the CA can be activated and used.</p>"},{"location":"certificate-templates/create/","title":"Create Templates","text":"<p>To create a new certificate template, login to PKIaaS.io and navigate to Certificate Templates -&gt; Create Template. Enter a name for the template and choose default settings by selecting an option from the \"Starter Template\" dropdown. Click \"Create Template\" to proceed to the configuration page, where the template options can be customized. Once satisfied with the settings, click \"Save\" to finalize the changes and return to the template management page.</p>"},{"location":"certificate-templates/delete/","title":"Delete Templates","text":"<p>To delete a certificate template, login to PKIaaS.io and navigate to Certificate Templates -&gt; Manage Templates in the navigation pane on the left of the page. Click on a template and select \"Edit Template\". If the template has no active certificates, you can use the red Delete button to remove it. Note that all certificates issued under the template must either be expired or revoked, and the revocation reason cannot be \"Certificate Hold\".</p>"},{"location":"certificate-templates/edit/","title":"Edit Templates","text":"<p>To edit the settings for a certificate template, login to PKIaaS.io and navigate to Certificate Templates -&gt; Manage Templates in the navigation pane on the left of the page. Click on a template and select \"Edit Template\".</p>"},{"location":"certificate-templates/edit/#options","title":"Options","text":""},{"location":"certificate-templates/edit/#general","title":"General","text":"<ul> <li>Enabled - enables/disables the template</li> <li>Allow unsolicited certificate web requests - enables/disables the \"Public Certificate Request\" URL for the template</li> <li>Allow the use of a valid certificate to authorize an automatic renewal request - enables/disables certificate renewal authorization using a previously issued certificate using the renewal options found on the CA's CPS page<ul> <li>Automatically revoke old certificate - revoke the old certificate used to authorize renewal</li> <li>Require certificate to be within - don't allow renewal using a certificate to authorize renewal unless it is within the specified number of days of expiration</li> <li>Copy subject and SANs from original certificate during renewal - use the same subject and subject alternative names from the old certificate used to authorize renewal</li> </ul> </li> <li>Signing Algorithm - customize the hash algorithm used to sign certificates</li> <li>Validity Period (Days) - specify the default length of time the issued certificate will be valid\u2014for manually issued certificates. This option can be overridden at the time of signing when the request is in X509 Certificates -&gt; Pending Requests</li> <li>Description - provide a description for the template</li> </ul>"},{"location":"certificate-templates/edit/#subject","title":"Subject","text":"<p>To honor the subject attributes requested within the CSR, use the Supplied by the CSR option. Otherwise, the subject attributes in the CSR will be overridden by the defaults defined here.</p>"},{"location":"certificate-templates/edit/#key-usage","title":"Key Usage","text":"<p>Select the key usages and extended key usages to be enabled for certificates issued using this template. Custom comma-separated extended key usage OIDs can be entered into the Custom EKU OIDs field.</p>"},{"location":"certificate-templates/edit/#basic-constraints","title":"Basic Constraints","text":"<p>The Basic Constraints extension in an X509 certificate defines whether the certificate is a Certificate Authority (CA) or an end-entity (non-CA) certificate. Set the Certificate Authority option to yes if the template will be used to sign subordinate CAs (intermediate CAs) certificate authorities. Path length defines the maximum number of subordinate CAs that can exist below this certificate in the certificate hierarchy.</p>"},{"location":"certificate-templates/edit/#crl-ocsp-aia-cps","title":"CRL / OCSP / AIA / CPS","text":"<ul> <li>Include AIA Extension in Certificate - The Authority Information Access (AIA) attribute is an optional but commonly included extension in an X.509 certificate. It provides information about how to access important resources or services related to the certificate issuer. Use this option to enable or disable the AIA attribute in certificates issued using this template.<ul> <li>Custom URL - Allows customization of the URL where the issuing CA\u2019s certificate (or chain) can be downloaded.</li> </ul> </li> <li>Include OCSP Extension in Certificate - Enable or disable the OCSP Responder attribute within the AIA extension in certificates issued using this template.</li> <li>Include CRL Extension in Certificate - Enable or disable the CRL Distribution Point (CDP) attribute in certificates issued using this template.</li> <li>Include CPS Extension in Certificate - Enable or disable the Certificate Policies attribute in certificates issued using this template. This attribute contains the URL to the Certificate Practice Statement (CPS) and the policy identifier.<ul> <li>Policy - Disable, select a predefined policy identifier, or enter a custom OID.</li> </ul> </li> </ul>"},{"location":"certificate-templates/edit/#scep","title":"SCEP","text":"<p>Simple Certificate Enrollment Protocol is a protocol designed to simplify the process of managing and issuing digital certificates in a scalable and automated manner. It is commonly used in environments where devices like routers, printers, and mobile devices need to enroll for certificates to enable secure communications. The SCEP URL for the template can be found by navigating to Certificate Templates -&gt; Manage Templates, next click on a template, and choose the Show Template Service URLs option. A modal will appear revealing the template service URLs including the SCEP URL.</p> <ul> <li>Enable SCEP protocol - Enable or disable SCEP for the template.</li> <li>Enable SCEP Static Passphrase - Enable or disable a static passphrase for SCEP services on the template. This may be required for SCEP processes that require the same passphrase to be used for multiple SCEP clients.</li> <li>Enable Microsoft Intune/Endpoint Manager Integration - Enable or disable Microsoft Intune SCEP integration for the template.</li> <li>Strip Root from GetCACert Requests - Exclude the root CA and return only the root in responses to SCEP GetCACert requests.</li> <li>Enable Microsoft SCEP compatibility - Enable or disable the Microsoft SCEP (NDES) compatibility. This option enabled PKIaaS.io to mimic the /CertSrv/mscep_admin/ URL on Microsoft NDES servers to generate \"enrollment challenge passwords\" for processes and workflows designed to work with this Microsoft NDES functionality. The URL for this page can be found by navigating to Certificate Templates -&gt; Manage Templates, next click on a template, and choose the SCEP Admin (Microsoft compatibility) option to navigate to the URL in a new tab.<ul> <li>Enable Microsoft SCEP basic auth - Enable or disable basic HTTP authentication for the Microsoft SCEP compatibility page. A username and password must be provided if this option is selected.</li> </ul> </li> <li>Enable IP ACL - Enable or disable the IP-based access control list (firewall functionality) for access to SCEP requests, the Microsoft compatibility page (if enabled) or both. Enter a list of IPs allowed to access the resources.</li> </ul>"},{"location":"certificate-templates/edit/#ct-logs","title":"CT Logs","text":"<p>For templates associated with root CAs or intermediate CAs that chain up to root CAs that require issued certificates to be submitted to certificate transparency logs, enter a comma-separated list of URLs where these certificates should be submitted here. The CT log must support logging for the CA associated with the template. This is something that must be coordinated with the owner of the CT log.</p>"},{"location":"certificate-templates/overview/","title":"Overview","text":"<p>Certificate templates are used to enforce compliance of predefined standards for issuing certificates with your certificate authority. These standards include key usages, subject attributes, basic constraints, and other certificate attributes. Certificate templates also serve as the entry point for many of the certificate issuance options on PKIaaS.io. Read more about these certificate issuance options on the getting started page.</p>"},{"location":"certificate-templates/service-urls/","title":"Service URLs","text":"<p>The SCEP services URL, ACME directory URL, and a URL to allow users to make public certificate requests can all be found by navigating to Certificate Templates -&gt; Manage Templates while logged into PKIaaS.io, and then by clicking one of the templates and selecting the Show Template Service URLs option.</p>"},{"location":"iot-hsm/installation/","title":"Installation","text":"<p>To get started with IoT-HSM, it is recommend to deploy a Long-Term Support (LTS) version of Ubuntu Server. IoT-HSM has been tested on Ubuntu 20.04, 22.04, and 24.04. Once Ubuntu is installed and updated, log in to a terminal shell and execute the following commands as the root user. You can access a root shell by entering <code>sudo su -</code> at the terminal. <pre><code>apt update\napt -y install curl\ncurl -sL https://raw.githubusercontent.com/lspiehler/iot-hsm/master/scripts/setup_ubuntu2004.sh | bash -\n</code></pre> After the script completes, it will be prompt to set a new password twice\u2014this password will be used for the admin account on the IoT-HSM web interface. Once configured, open a browser and navigate to the IP address of the Ubuntu endpoint, prefixed with <code>https://</code>. For example: <code>https://192.168.1.5</code>.</p> <p>See the provisioning documentation to provision a certificate authority for use with IoT-HSM.</p>"},{"location":"iot-hsm/overview/","title":"Overview","text":"<p>See the installation documentation to get started with IoT-HSM.</p>"},{"location":"iot-hsm/overview/#overview_1","title":"Overview","text":"<p>IoT-HSM is a lightweight application designed to enable a persistent connection between one or more YubiKeys and PKIaaS.io. Once deployed and provisioned for a Certificate Authority (CA), it securely forwards all signing requests for the CA from PKIaaS.io to the IoT-HSM, where the connected YubiKey handles the signing. To ensure robust security, all communications with the IoT-HSM are digitally signed with end-to-end encryption via S/MIME.</p>"},{"location":"iot-hsm/provisioning/","title":"Provisioning","text":"<p>If you haven't yet deployed IoT-HSM, see the installation documentation to get started.</p>"},{"location":"iot-hsm/provisioning/#create-a-ca-with-an-hsm-key-on-pkiaasio","title":"Create a CA with an HSM Key on PKIaaS.io","text":"<p>In order for a certificate authority on PKIaaS.io to delegate signing operations to a YubiKey managed by IoT-HSM, it must first be provisioned to do so. The first step in this process is to select the \"HSM\" option as the \"Key Type\" when creating a new certificate authority on the Certificate Authorities -&gt; Create new CA page.</p>"},{"location":"iot-hsm/provisioning/#retrieve-hsm-provisioning-certificate-from-pkiaasio","title":"Retrieve HSM Provisioning Certificate from PKIaaS.io","text":"<p>After clicking \"Create New CA,\" the browser will navigate to a page showing the \"HSM Provisioning Certificate.\" This will be used as a template to configure the new CA on one of the YubiKey slots.</p> <p>Note: If at any time you need to navigate back to this page, go to Certificate Authorities -&gt; Manage CAs, click on the CA and select \"Download HSM Provisioning Certificate\" from the menu.</p>"},{"location":"iot-hsm/provisioning/#prepare-the-private-key-on-the-iot-hsm","title":"Prepare the Private Key on the IoT-HSM","text":"<p>Login to the IoT-HSM. From the \"HSM Options...\" dropdown, choose \"Provision a New Slot.\" This will navigate to the provisioning wizard. Choose the slot to provision and a key option. The \"Generate\" option (recommended) will generate a new private key on the YubiKey slot using the \"Key Type\" option provided. The \"Import\" option allows an existing private key to be imported to the YubiKey slot. This option should only be used when the private key has been handled with extreme care and is ideal under circumstances when it is important to have a backup of the private key or if multiple IoT-HSMs will be provisioned with the same private key for redundancy.</p>"},{"location":"iot-hsm/provisioning/#import-the-hsm-provisioning-certificate-to-the-iot-hsm","title":"Import the HSM Provisioning Certificate to the IoT-HSM","text":""},{"location":"iot-hsm/provisioning/#self-signed-root-ca","title":"Self-Signed Root CA","text":"<p>After preparing the private key, the next page in the provisioning wizard is where the \"HSM Provisioning Certificate\" generated in a previous step will be submitted. If a self-signed root CA is being generated, leave the first option selected, paste the provisioning certificate into the text area, and click submit.</p>"},{"location":"iot-hsm/provisioning/#intermediate-ca","title":"Intermediate CA","text":"<p>If this CA will be an intermediate CA, select the option to generate a CSR, paste the provisioning certificate into the text area, and click submit. A modal will appear with a CSR that will need to be signed by the root CA issuing the certificate for this intermediate. Finally, select the last option in the dropdown and paste the certificate signed by the root using the provided CSR and click submit.</p> <p>Note: If at any time you need to navigate back to this page, go to the IoT-HSM home page, select the slot being provisioned from the \"Configured Slots...\" drop down, and click \"Complete Provisioning.\"</p>"},{"location":"iot-hsm/provisioning/#import-the-new-certificate-from-the-iot-hsm-to-pkiaasio","title":"Import the New Certificate from the IoT-HSM to PKIaaS.io","text":"<p>Navigate to the IoT-HSM home page. Select the newly provisioned slot from the \"Configured Slots...\" drop down and click \"View Certificate.\" Copy the certificate to the clipboard and on PKIaaS.io, navigate to Certificate Authorities -&gt; Manage CAs, click on the CA being provisioned, and select \"Import Signed Certificate.\" Paste the certificate copied from the IoT-HSM into the text area and click \"Import Certificate.\" A prompt will appear instructing to restart the IoT-HSM device. On the IoT-HSM home page, click \"Reload\" in the navigation bar at the top. Click \"Import Certificate\" again on the PKIaaS.io import signed CA page. If the imported certificate is an intermediate CA and PKIaaS.io is unable to download the certificate chain, a modal will appear prompting for the chain, including all intermediates and the root, to be supplied before the import can be completed.</p>"},{"location":"iot-hsm/provisioning/#provisioning-complete","title":"Provisioning Complete","text":"<p>When the steps have all be completed successfully, all signing requests for the provisioned CA will be delegated to the YubiKey on the IoT-HSM. Signing operations will fail if the IoT-HSM is not online with the YubiKey inserted.</p>"},{"location":"use-cases/sample-use-case/","title":"Sample Use Case","text":""},{"location":"use-cases/sample-use-case/#sample-use-case","title":"Sample Use Case","text":""}]}